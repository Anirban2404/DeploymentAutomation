/*globals define*/
/*jshint node:true, browser:true*/

/**
 * Generated by PluginGenerator 1.7.0 from webgme on Wed Jun 14 2017 11:50:18 GMT-0500 (CDT).
 * A plugin that inherits from the PluginBase. To see source code documentation about available
 * properties and methods visit %host%/docs/source/PluginBase.html.
 */

define([
    'plugin/PluginConfig',
    'text!./metadata.json',
    'plugin/PluginBase'
], function (PluginConfig,
             pluginMetadata,
             PluginBase) {
    'use strict';

    pluginMetadata = JSON.parse(pluginMetadata);

    /**
     * Initializes a new instance of websserverAnsible.
     * @class
     * @augments {PluginBase}
     * @classdesc this class represents the plugin websserverAnsible.
     * @constructor
     */
    var websserverAnsible = function () {
        // Call base class' constructor.
        PluginBase.call(this);
        this.pluginMetadata = pluginMetadata;
        this.pathToNode = {};
    };

    /**
     * Metadata associated with the plugin. Contains id, name, version, description, icon, configStructue etc.
     * this is also available at the instance at this.pluginMetadata.
     * @type {object}
     */
    websserverAnsible.metadata = pluginMetadata;

    // Prototypical inheritance from PluginBase.
    websserverAnsible.prototype = Object.create(PluginBase.prototype);
    websserverAnsible.prototype.constructor = websserverAnsible;
    var deasync = require("deasync");
    /**
     * Main function for the plugin to execute. this will perform the execution.
     * Notes:
     * - Always log with the provided logger.[error,warning,info,debug].
     * - Do NOT put any user interaction logic UI, etc. inside this method.
     * - callback always has to be called even if error happened.
     *
     * @param {function(string, plugin.PluginResult)} callback - the result callback
     */
    websserverAnsible.prototype.main = function (callback) {
        // Use this to access core, project, result, logger etc from PluginBase.
        // These are all instantiated at this point.
        var nodeObject,
            datamodelStr;

        // Using the coreAPI to make changes.

        nodeObject = this.activeNode;
        this.extractDataModel();

    };


    websserverAnsible.prototype.extractDataModel = function (callback) {
        var self = this;
        //this.pathToNode={};
        var dataModel =
            {
                ApplicationModel: {
                    AppType: "",
                    AppName: "",
                    host_ip: "",
                    srcPath: "",
                    language: "",
                    WebEngine: "",
                    OS: {
                        name: "",
                        version: ""
                    }
                }
            };

        //this.logger.info (this.core.getAttribute(this.activeNode, 'name'));

        // In order to avoid multiple iterative asynchronous 'load' calls we pre-load all the nodes in the state-machine
        // and builds up a local hash-map from their paths to the node.
        return this.core.loadSubTree(self.activeNode)
            .then(function (nodes) {


                // All the nodes or objects
                var j,
                    a,
                    childNode,
                    childName,
                    acq_node,
                    algo,
                    childrenPaths;

                for (var i = 0; i < nodes.length; i += 1) {
                    self.pathToNode[self.core.getPath(nodes[i])] = nodes[i];
                    //self.logger.info(self.core.getAttribute(nodes[i], 'name'));

                    if (self.isMetaTypeOf(nodes[i], self.META['WebApplication']) === true) {
                        dataModel.ApplicationModel.AppType = 'WebApplication';
                        var language = self.core.getAttribute(nodes[i], 'language');
                        dataModel.ApplicationModel.language = language;
                        self.logger.info(language);
                        var appName = self.core.getAttribute(nodes[i], 'name');
                        dataModel.ApplicationModel.AppName = appName;
                        self.logger.info(appName);
                        var srcPath = self.core.getAttribute(nodes[i], 'src');
                        dataModel.ApplicationModel.srcPath = srcPath;
                        self.logger.info(srcPath);
                        //generateAnsible(JSON.stringify(dataModel, null, 4));
                    }
                    if (self.isMetaTypeOf(nodes[i], self.META['Hardware']) === true) {
                        var host_ip = self.core.getAttribute(nodes[i], 'host_ip');
                        dataModel.ApplicationModel.host_ip = host_ip;
                        self.logger.info(host_ip);
                        //generateAnsible(JSON.stringify(dataModel, null, 4));
                    }
                }

                childrenPaths = self.core.getChildrenPaths(self.activeNode);

                for (i = 0; i < childrenPaths.length; i += 1) {
                    childNode = self.pathToNode[childrenPaths[i]];
                    // Log the name of the child (it's an attribute so we use getAttribute).
                    childName = self.core.getAttribute(childNode, 'name');
                    // self.logger.info('At childNode', childName);
                    if (self.isMetaTypeOf(childNode, self.META['WebApplication']) === true) {
                        // The children paths are available from the node.
                        var acq_path = self.core.getChildrenPaths(childNode);
                        for (j = 0; j < acq_path.length; j += 1) {
                            acq_node = self.pathToNode[acq_path[j]];
                            var webEngine = self.core.getAttribute(acq_node, 'name');
                            dataModel.ApplicationModel.WebEngine = webEngine;
                            self.logger.info(webEngine);

                        }
                    }
                    if (self.isMetaTypeOf(childNode, self.META['Hardware']) === true) {
                        // The children paths are available from the node.
                        var acq_path = self.core.getChildrenPaths(childNode);
                        for (j = 0; j < acq_path.length; j += 1) {
                            acq_node = self.pathToNode[acq_path[j]];
                            var os_name = self.core.getAttribute(acq_node, 'name');
                            dataModel.ApplicationModel.OS.name = os_name;
                            self.logger.info(os_name);
                            var os_version = self.core.getAttribute(acq_node, 'version');
                            dataModel.ApplicationModel.OS.version = os_version;
                            self.logger.info(os_version);

                        }
                    }
                }
                generateAnsible(JSON.stringify(dataModel, null, 4));
            });
    };

    var generateAnsible = function (_datamodel) {
        console.log("Generate Ansible Scripts..");
        //console.log(_datamodel);
        //_datamodel.
        var readJSON = JSON.parse(_datamodel);
        var AppType = readJSON['ApplicationModel']['AppType'];
        var name = readJSON['ApplicationModel']['AppName'];
        var hostip = readJSON['ApplicationModel']['host_ip'];
        var srcPath = readJSON['ApplicationModel']['srcPath'];
        var language = readJSON['ApplicationModel']['language'];
        var webEngine = readJSON['ApplicationModel']['WebEngine'];
        var ostype = readJSON['ApplicationModel']['OS']['name'];
        var osversion = readJSON['ApplicationModel']['OS']['version'];

        console.log(AppType);
        console.log(name);
        console.log(srcPath);
        console.log(language);
        console.log(webEngine);

        console.log(hostip);
        console.log(ostype);
        console.log(osversion);

        // Create ansible file for WebServer
        var fs = require('fs');
        var fs = require('fs-extra')
        var path = require("path");
        var scriptdir = path.resolve(".");
        var mkdirp = require('mkdirp')
        scriptdir += "/examples/ansibleScript/";
        scriptdir += AppType;
        //console.log(scriptdir);
        fs.ensureDirSync(scriptdir, function (err) {
            if (err) {
                console.log(err);
            } else {
                console.log('Directory ' + directory + ' created.');
            }
        });

        var hostfile = scriptdir + '/' + 'hosts';
        console.log(hostfile);

        var hostContent = "[webserver]\n";
        hostContent += hostip;
        hostContent += " ansible_connection=ssh ansible_user=ubuntu ansible_python_interpreter=/usr/bin/python3";
        //console.log ( hostContent);
        fs.writeFile(hostfile, hostContent, function (err) {
            if (err) {
                return console.log(err);
            }

            console.log("The host file was saved!");
        });


        //Genarating to the main playbook

        var deploydir = path.resolve(".");
        var deployFile = scriptdir + '/' + 'site.yml';
        console.log(deployFile);

        //console.log('deploydir: ' + deploydir);

        var websiteTempfile = deploydir + "/templates/websiteTemp";
        console.log(websiteTempfile);
        //Read the header file
        var websiteTemp = fs.readFileSync(websiteTempfile, 'utf8');

        fs.writeFileSync(deployFile, websiteTemp);
        var vars = "\n\n  vars:\n";
        vars += "    - path: " + srcPath;
        console.log(vars);
        fs.appendFileSync(deployFile, vars);



        // Creating roles directory
        var roleDir = scriptdir + "/roles";

        fs.ensureDirSync(roleDir, function (err) {
            if (err) {
                console.log(err);
            } else {
                console.log('Role Directory ' + directory + ' created.');
            }
        });

        //  Creating Application directory in roles directory
        var roleAppDir = roleDir + "/" + name;
        fs.ensureDirSync(roleAppDir, function (err) {
            if (err) {
                console.log(err);
            } else {
                console.log('Role Directory ' + directory + ' created.');
            }
        });

        // Creating Tasks directory in Application directory
        var roleAppDir = roleDir + "/" + name;
        fs.ensureDirSync(roleAppDir, function (err) {
            if (err) {
                console.log(err);
            } else {
                console.log('Role Directory ' + directory + ' created.');
            }
        });
        // Creating Main Task file
        var roleTaskDir = roleAppDir + "/" + "tasks";
        fs.ensureDirSync(roleTaskDir, function (err) {
            if (err) {
                console.log(err);
            } else {
                console.log('Role Directory ' + directory + ' created.');
            }
        });
        // Creating Main Task file
        var mainTaskFile = roleTaskDir + "/" + "main.yml";
        //language
        fs.writeFileSync(mainTaskFile, "---\n");

        // MySQL driver
        var mysql = require('mysql');

        var conn = mysql.createConnection({
            // host: "127.0.0.1",
            user: "root",
            password: "isislab"
        });


        conn.connect(function (err) {
            if (err) throw err;
            console.log("Connected!");
        });

        if ( language.toLowerCase() == "nodejs") {
            var sql = "SELECT b.pkg_name FROM softwaredependency.packages b ,softwaredependency.swdependency a where b.app_id=a.id and a.AppType='" + language.toLowerCase() + "'";
            sql += "and b.sw_id in (select app_sw_id FROM softwaredependency.os_dependency where os_id in (SELECT id FROM softwaredependency.os_pkg_mgr ";
            sql += "where concat(OS_type,OS_version) = '" + ostype + osversion + "'))";

            var install_language = "- include: install_" + language.toLowerCase() + ".yml";
            fs.appendFileSync(mainTaskFile, install_language);

            console.log(install_language);

            var ubuntu_pkg_vars = "\n\n      ubuntu_" + language.toLowerCase()+"_pkgs:\n";
            ubuntu_pkg_vars += "        <<packages>>"
            fs.appendFileSync(deployFile, ubuntu_pkg_vars);
            console.log(deployFile);
            var pkg_result ="";
            var replace = require("replace");
            conn.query(sql, function (err, rows) {
                if (err) throw err;
                for (var i in rows) {
                    var rowResult = "         - " + rows[i].pkg_name;
                    console.log(rowResult);
                    pkg_result += rowResult +"\n";
                }
                replace({
                    regex: "        <<packages>>",
                    replacement: pkg_result,
                    paths: [deployFile],
                    recursive: true,
                    silent: true,
                });
            });

            conn.end();

            var nodeTempfile = deploydir + "/templates/nodeTemplate";
            console.log(nodeTempfile);
            //Read the header file
            var nodeTemp = fs.readFileSync(nodeTempfile, 'utf8');

            // Creating Task file
            var nodeTaskFile = roleTaskDir + "/" +  "install_" + language.toLowerCase() + ".yml";
            console.log(nodeTaskFile);
            fs.writeFile(nodeTaskFile, nodeTemp, function (err) {
                if (err) {
                    return console.log(err);
                }

                console.log("The node file was generated!");
            });
        }

        var roles = "\n\n  roles:\n";
        roles += "    - " + name;
        fs.appendFileSync(deployFile, roles);
    };
    // openstack server list --name test16| awk '{print $8}'

    return websserverAnsible;
});
