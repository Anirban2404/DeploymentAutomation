/*globals define*/
/*jshint node:true, browser:true*/

/**
 * Generated by PluginGenerator 1.7.0 from webgme on Wed Jun 14 2017 11:50:18 GMT-0500 (CDT).
 * A plugin that inherits from the PluginBase. To see source code documentation about available
 * properties and methods visit %host%/docs/source/PluginBase.html.
 */

define([
    'plugin/PluginConfig',
    'text!./metadata.json',
    'plugin/PluginBase'
], function (
    PluginConfig,
    pluginMetadata,
    PluginBase) {
    'use strict';

    pluginMetadata = JSON.parse(pluginMetadata);

    /**
     * Initializes a new instance of websserverAnsible.
     * @class
     * @augments {PluginBase}
     * @classdesc this class represents the plugin websserverAnsible.
     * @constructor
     */
    var websserverAnsible = function () {
        // Call base class' constructor.
        PluginBase.call(this);
        this.pluginMetadata = pluginMetadata;
        this.pathToNode = {};
    };

    /**
     * Metadata associated with the plugin. Contains id, name, version, description, icon, configStructue etc.
     * this is also available at the instance at this.pluginMetadata.
     * @type {object}
     */
    websserverAnsible.metadata = pluginMetadata;

    // Prototypical inheritance from PluginBase.
    websserverAnsible.prototype = Object.create(PluginBase.prototype);
    websserverAnsible.prototype.constructor = websserverAnsible;

    /**
     * Main function for the plugin to execute. this will perform the execution.
     * Notes:
     * - Always log with the provided logger.[error,warning,info,debug].
     * - Do NOT put any user interaction logic UI, etc. inside this method.
     * - callback always has to be called even if error happened.
     *
     * @param {function(string, plugin.PluginResult)} callback - the result callback
     */
    websserverAnsible.prototype.main = function (callback) {
        // Use this to access core, project, result, logger etc from PluginBase.
        // These are all instantiated at this point.
        var nodeObject,
            datamodelStr;

        // Using the coreAPI to make changes.

        nodeObject = this.activeNode;
        this.extractDataModel();

    };


    websserverAnsible.prototype.extractDataModel = function (callback) {
        var self = this;
        //this.pathToNode={};
        var dataModel =
            {
                ApplicationModel: {
                    AppType: "",
                    AppName: "",
                    host_ip: "",
                    srcPath: "",
                    language: "",
                    WebEngine: "",
                    OS: {
                        name: "",
                        version: ""
                    }
                }
            };

        //this.logger.info (this.core.getAttribute(this.activeNode, 'name'));

        // In order to avoid multiple iterative asynchronous 'load' calls we pre-load all the nodes in the state-machine
        // and builds up a local hash-map from their paths to the node.
        return this.core.loadSubTree(self.activeNode)
            .then(function (nodes) {


                // All the nodes or objects
                var j,
                    a,
                    childNode,
                    childName,
                    acq_node,
                    algo,
                    childrenPaths;

                for (var i = 0; i < nodes.length; i += 1) {
                    self.pathToNode[self.core.getPath(nodes[i])] = nodes[i];
                    //self.logger.info(self.core.getAttribute(nodes[i], 'name'));

                    if (self.isMetaTypeOf(nodes[i], self.META['WebApplication']) === true)
                    {
                        dataModel.ApplicationModel.AppType = 'WebApplication';
                        var host_ip = self.core.getAttribute(nodes[i], 'host_ip');
                        dataModel.ApplicationModel.host_ip = host_ip;
                        self.logger.info(host_ip);
                        var language = self.core.getAttribute(nodes[i], 'language');
                        dataModel.ApplicationModel.language = language;
                        self.logger.info(language);
                        var appName = self.core.getAttribute(nodes[i], 'name');
                        dataModel.ApplicationModel.AppName = appName;
                        self.logger.info(appName);
                        var srcPath = self.core.getAttribute(nodes[i], 'src');
                        dataModel.ApplicationModel.srcPath = srcPath;
                        self.logger.info(srcPath);
                        generateAnsible(JSON.stringify(dataModel, null, 4));
                    }
                }
            });
    };

    var generateAnsible = function (_datamodel) {
        console.log("Generate Ansible Scripts..");
        //console.log(_datamodel);
        //_datamodel.
        var readJSON = JSON.parse(_datamodel);
        var AppType = readJSON['ApplicationModel']['AppType'];
        var name = readJSON['ApplicationModel']['AppName'];
        var hostip = readJSON['ApplicationModel']['host_ip'];
        var srcPath = readJSON['ApplicationModel']['srcPath'];
        var language = readJSON['ApplicationModel']['language'];
        var webEngine = readJSON['ApplicationModel']['WebEngine'];
        var ostype = readJSON['ApplicationModel']['OS']['name'];
        var osversion = readJSON['ApplicationModel']['OS']['name'];

        console.log(AppType);
        console.log(name);
        console.log(hostip);
        console.log(srcPath);
        console.log(language);
        console.log(webEngine);
        console.log(ostype);
        console.log(osversion);

        // Create ansible file for WebServer
        var fs = require('fs');
        var fs = require('fs-extra')
        var path = require("path");
        var dir =  path.resolve(".");
        var mkdirp = require('mkdirp')
        dir += "/examples/ansibleScript/";
        dir += AppType;
        console.log(dir);
        fs.ensureDirSync(dir , function (err) {
            if (err) {
                console.log(err);
            } else {
                console.log('Directory ' + directory + ' created.');
            }
        });

        var hostfile = dir + '/' + 'hosts';
        fs.exists( hostfile, function (exists) {
            if (exists) {
                //Show in green
                console.log('File exists. Deleting now ...');
                fs.unlink(hostfile);
            } else {
                //Show in red
                console.log('File not found, so not deleting.');
            }
        });
        console.log ( hostfile);
        var hostContent = hostip;
        fs.writeFileSync(hostfile, hostContent);

    };

    return websserverAnsible;
});
