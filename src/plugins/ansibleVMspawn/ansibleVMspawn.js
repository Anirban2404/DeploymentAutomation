/*globals define*/
/*jshint node:true, browser:true*/

/**
 * Generated by PluginGenerator 1.7.0 from webgme on Fri Jun 09 2017 14:20:55 GMT-0500 (CDT).
 * A plugin that inherits from the PluginBase. To see source code documentation about available
 * properties and methods visit %host%/docs/source/PluginBase.html.
 */

define([
    'plugin/PluginConfig',
    'text!./metadata.json',
    'plugin/PluginBase'
], function (
    PluginConfig,
    pluginMetadata,
    PluginBase) {
    'use strict';

    pluginMetadata = JSON.parse(pluginMetadata);

    /**
     * Initializes a new instance of ansibleVMspawn.
     * @class
     * @augments {PluginBase}
     * @classdesc This class represents the plugin ansibleVMspawn.
     * @constructor
     */
    var ansibleVMspawn = function () {
        // Call base class' constructor.
        PluginBase.call(this);
        this.pluginMetadata = pluginMetadata;
        this.pathToNode = {};
    };

    /**
     * Metadata associated with the plugin. Contains id, name, version, description, icon, configStructue etc.
     * This is also available at the instance at this.pluginMetadata.
     * @type {object}
     */
    ansibleVMspawn.metadata = pluginMetadata;

    // Prototypical inheritance from PluginBase.
    ansibleVMspawn.prototype = Object.create(PluginBase.prototype);
    ansibleVMspawn.prototype.constructor = ansibleVMspawn;

    /**
     * Main function for the plugin to execute. This will perform the execution.
     * Notes:
     * - Always log with the provided logger.[error,warning,info,debug].
     * - Do NOT put any user interaction logic UI, etc. inside this method.
     * - callback always has to be called even if error happened.
     *
     * @param {function(string, plugin.PluginResult)} callback - the result callback
     */
    ansibleVMspawn.prototype.main = function (callback) {
        // Use self to access core, project, result, logger etc from PluginBase.
        // These are all instantiated at this point.
        var self = this,
            nodeObject;

        // Using the coreAPI to make changes.

        nodeObject = self.activeNode;
        self.extractDataModel();
    };

    /**
     *
     * @param {function(Error, object)} [callback] - If not defined promise a will be returned.
     */

    ansibleVMspawn.prototype.extractDataModel = function (callback) {
        var self = this;

        //self.pathToNode={};

        //self.logger.info (self.core.getAttribute(self.activeNode, 'name'));

        // In order to avoid multiple iterative asynchronous 'load' calls we pre-load all the nodes in the state-machine
        // and builds up a local hash-map from their paths to the node.
        return this.core.loadSubTree(self.activeNode)
            .then(function (nodes) {
                // All the nodes or objects
                for (var i = 0; i < nodes.length; i += 1) {
                    self.pathToNode[self.core.getPath(nodes[i])] = nodes[i];
                    self.logger.info(self.core.getAttribute(nodes[i], 'name'));


                    if (self.isMetaTypeOf(nodes[i], self.META['OpenStack']) === true) {
                        var flavor_name = self.core.getAttribute(nodes[i], 'flavor_name');
                        self.logger.info(flavor_name);
                        var image = self.core.getAttribute(nodes[i], 'image');
                        self.logger.info(image);
                        var hostname = self.core.getAttribute(nodes[i], 'hostname');
                        self.logger.info(hostname);
                        var vmName = self.core.getAttribute(nodes[i], 'name');
                        self.logger.info(vmName);
                        var network = self.core.getAttribute(nodes[i], 'network');
                        self.logger.info(network);
                        var _variables = "VM_Name=" + vmName + " Image_Name=" + image + " Flavor_Name=" +   flavor_name + " Host_Name=" + "nova:" +  hostname + " Network_Name="  + network ;
                        self.logger.info(_variables);

                        spawnVM(_variables,vmName);
                    }
                }
            });
    };

    var spawnVM = function (_variables,vmName) {

        console.log("Spawning VM..");
        console.log(_variables);
        var shell = require('child_process');

        var command = "ansible-playbook ";
        command += "/root/ansible_test/openstackVMspawn.yml ";
        command += "--extra-vars ";
        command += '" ' + _variables + ' "';
        console.log(command);

        // var promise =
        shell.exec(command);
        // promise.then(err => {
        //  if (err)
        //     console.error(err);
        // });
    };
    return ansibleVMspawn;
});
