/*globals define*/
/*jshint node:true, browser:true*/

/**
 * Generated by PluginGenerator 1.7.0 from webgme on Fri Nov 04 2016 15:12:35 GMT-0500 (CDT).
 * A plugin that inherits from the PluginBase. To see source code documentation about available
 * properties and methods visit %host%/docs/source/PluginBase.html.
 */

define([
    'plugin/PluginConfig',
    'text!./metadata.json',
    'plugin/PluginBase',
    'common/util/ejs'
], function (PluginConfig,
             pluginMetadata,
             PluginBase,
             ejs) {
    'use strict';

    pluginMetadata = JSON.parse(pluginMetadata);

    /**
     * Initializes a new instance of Linear_Regression_CodeGenerator.
     * @class
     * @augments {PluginBase}
     * @classdesc This class represents the plugin Linear_Regression_CodeGenerator.
     * @constructor
     */
    var DeploymentCodeGenerator = function () {
        // Call base class' constructor.
        PluginBase.call(this);
        this.pluginMetadata = pluginMetadata;
        this.pathToNode = {};
    };

    /**
     * Metadata associated with the plugin. Contains id, name, version, description, icon, configStructue etc.
     * This is also available at the instance at this.pluginMetadata.
     * @type {object}
     */
    DeploymentCodeGenerator.metadata = pluginMetadata;

    // Prototypical inheritance from PluginBase.
    DeploymentCodeGenerator.prototype = Object.create(PluginBase.prototype);
    DeploymentCodeGenerator.prototype.constructor = DeploymentCodeGenerator;

    /**
     * Main function for the plugin to execute. This will perform the execution.
     * Notes:
     * - Always log with the provided logger.[error,warning,info,debug].
     * - Do NOT put any user interaction logic UI, etc. inside this method.
     * - callback always has to be called even if error happened.
     *
     * @param {function(string, plugin.PluginResult)} callback - the result callback
     */
    DeploymentCodeGenerator.prototype.main = function (call_back) {
        // Use self to access core, project, result, logger etc from PluginBase.
        // These are all instantiated at this point.
        var self = this,
            artifact,
            dataModelStr,
            nodeObject,
            DBModelStr;


        // Using the logger.
        // self.logger.debug('This is a debug message.');
        // self.logger.info('This is an info message.');
        // self.logger.warn('This is a warning message.');
        // self.logger.error('This is an error message.');

        // Using the coreAPI to make changes.

        //nodeObject = self.activeNode;

        //self.core.setAttribute(nodeObject, 'name', 'My new obj');
        //self.core.setRegistry(nodeObject, 'position', {x: 70, y: 70});


        self.extractDataModel()
            .then(function (dataModel) {
                dataModelStr = JSON.stringify(dataModel, null, 4);
                self.dataModel = dataModel;
                self.logger.info('Extracted dataModel', dataModelStr);
                return self.blobClient.putFile('WebConf.json', dataModelStr);
            })
            .then(function (jsonFileHash) {
                self.logger.info('WebConf.json available with blobHash', jsonFileHash);
                // Add link from result to this file.
                self.result.addArtifact(jsonFileHash);

                // Create a complex artifact, with links to multiple files.
                artifact = self.blobClient.createArtifact('WebConf');

                return artifact.addFilesAsSoftLinks({
                    'WebConf.json': dataModelStr
                });
            })
            .then(function (/*hashes*/) {
                return artifact.save();
            })
            .then(function (simulatorHash) {
                self.result.addArtifact(simulatorHash);

                return self.save('Added WebConf to model');
            })
            .then(function () {
                self.result.setSuccess(true);
                call_back(null, self.result);
            })
            .catch(function (err) {
                call_back(err, self.result);
            });

        // This will save the changes. If you don't want to save;
        // exclude self.save and call callback directly from this scope.
        /* self.save('Linear_Regression_CodeGenerator updated model.')
         .then(function () {
         self.result.setSuccess(true);
         callback(null, self.result);
         })
         .catch(function (err) {
         // Result success is false at invocation.
         callback(err, self.result);
         });*/

        //##########################################
        self.extractDBModel()
            .then(function (DBModel) {
                DBModelStr = JSON.stringify(DBModel, null, 4);
                self.DBModel = DBModel;
                self.logger.info('Extracted DBModel', DBModelStr);
                return self.blobClient.putFile('DBConf.json', DBModelStr);
            })
            .then(function (jsonFileHash) {
                self.logger.info('DBConf.json available with blobHash', jsonFileHash);
                // Add link from result to this file.
                self.result.addArtifact(jsonFileHash);

                // Create a complex artifact, with links to multiple files.
                artifact = self.blobClient.createArtifact('DBConf');

                return artifact.addFilesAsSoftLinks({
                    'DBConf.json': DBModelStr
                });
            })
            .then(function (/*hashes*/) {
                return artifact.save();
            })
            .then(function (simulatorHash) {
                self.result.addArtifact(simulatorHash);

                return self.save('Added DBConf to model');
            })
            .then(function () {
                self.result.setSuccess(true);
                callback(null, self.result);
            })
            .catch(function (err) {
                callback(err, self.result);
            });

    };

    /**
     *
     * @param {function(Error, object)} [callback] - If not defined promise a will be returned.
     */

    DeploymentCodeGenerator.prototype.extractDataModel = function (call_back) {
        var self = this;

        var dataModel =
        {
            ApplicationModel: {
                AppType: "",
                host_ip: "",
                dataPath: "",
                language: "",
                WebEngine: "",
                OS: {
                    name: "",
                    version: ""
                }
            }
        };


       //self.pathToNode={};


        dataModel.ApplicationModel.name = self.core.getAttribute(self.activeNode, 'name');

        // In order to avoid multiple iterative asynchronous 'load' calls we pre-load all the nodes in the state-machine
        // and builds up a local hash-map from their paths to the node.
        return this.core.loadSubTree(self.activeNode)
            .then(function (nodes) {
                // All the nodes or objects
                var i,
                    j,
                    a,
                    childNode,
                    childName,
                    acq_node,
                    algo,
                    childrenPaths;

                for (i = 0; i < nodes.length; i += 1) {
                    self.pathToNode[self.core.getPath(nodes[i])] = nodes[i];
                    //self.logger.info(self.core.getAttribute(nodes[i], 'name'));

                    if (self.isMetaTypeOf(nodes[i], self.META['Ubuntu']) === true) {
                        dataModel.ApplicationModel.OS.name = self.core.getAttribute(nodes[i], 'name');
                    }

                    if (self.isMetaTypeOf(nodes[i], self.META['Ubuntu']) === true) {
                        dataModel.ApplicationModel.OS.version = self.core.getAttribute(nodes[i], 'version');
                    }

                    if (self.isMetaTypeOf(nodes[i], self.META['WebApplication']) === true) {
                        dataModel.ApplicationModel.AppType = self.core.getAttribute(nodes[i], 'name');
                    }
                    if (self.isMetaTypeOf(nodes[i], self.META['WebApplication']) === true) {
                        dataModel.ApplicationModel.language = self.core.getAttribute(nodes[i], 'language');
                    }

                    if (self.isMetaTypeOf(nodes[i], self.META['WebApplication']) === true) {
                        dataModel.ApplicationModel.dataPath = self.core.getAttribute(nodes[i], 'src');
                    }

                    if (self.isMetaTypeOf(nodes[i], self.META['WebApplication']) === true) {
                        dataModel.ApplicationModel.host_ip = self.core.getAttribute(nodes[i], 'host_ip');
                    }

                }
                childrenPaths = self.core.getChildrenPaths(self.activeNode);

                for (i = 0; i < childrenPaths.length; i += 1) {
                    childNode = self.pathToNode[childrenPaths[i]];
                    // Log the name of the child (it's an attribute so we use getAttribute).
                    childName = self.core.getAttribute(childNode, 'name');
                    //self.logger.info('At childNode', childName);
                    if (self.isMetaTypeOf(childNode, self.META['WebApplication']) === true) {
                        // The children paths are available from the node.
                        var acq_path = self.core.getChildrenPaths(childNode);
                        for (j = 0; j < acq_path.length; j += 1) {
                            acq_node = self.pathToNode[acq_path[j]];
                            var acq_Name = self.core.getAttribute(acq_node, 'name');
                            //self.logger.info('At acq_node', acq_Name);
                            if (self.isMetaTypeOf(acq_node, self.META['Nginx']) === true) {
                                dataModel.ApplicationModel.WebEngine = self.core.getAttribute(acq_node, 'name');
                            }

                            if (self.isMetaTypeOf(acq_node, self.META['Apache']) === true) {
                                dataModel.ApplicationModel.WebEngine = self.core.getAttribute(acq_node, 'name');
                            }
                        }
                    }

                }
                return dataModel;
            })
            .nodeify(call_back);
    };

    DeploymentCodeGenerator.prototype.extractDBModel = function (callback) {
        var self = this;

        var DBModel =
        {
            ApplicationModel: {
                AppType: "",
                DB_host_ip: "",
                DBPath: "",
                DBEngine: "",
                DBport: "",
                DB: {
                    user: "",
                    password: ""
                },
                OS: {
                    name: "",
                    version: ""
                }
            }
        };


        //self.pathToNode={};



        DBModel.ApplicationModel.name = self.core.getAttribute(self.activeNode, 'name');



        // In order to avoid multiple iterative asynchronous 'load' calls we pre-load all the nodes in the state-machine
        // and builds up a local hash-map from their paths to the node.
        return this.core.loadSubTree(self.activeNode)
            .then(function (nodes) {
                // All the nodes or objects
                var i,
                    j,
                    a,
                    childNode,
                    childName,
                    acq_node,
                    algo,
                    childrenPaths;

                for (i = 0; i < nodes.length; i += 1) {
                    self.pathToNode[self.core.getPath(nodes[i])] = nodes[i];

                    /*
                    Node = self.pathToNode[nodes[i]];
                    //self.logger.info(self.core.getAttribute(nodes[i], 'name'));
                    var srcPath = self.core.getPointerPath(nodes[i], 'src');
                    var dstPath = self.core.getPointerPath(nodes[i], 'dst');

                    // Pathes are always non-empty strings (expect for the rootNode which
                    // cannot be the target of a pointer) and non-empty strings are "truthy"..
                    if (srcPath && dstPath) {
                        var srcNode = nodes[srcPath];
                        var dstNode = nodes[dstPath];
                        self.logger.info(self.core.getAttribute(nodes, 'name'),
                            'connects',
                            self.core.getAttribute(srcNode, 'name'),
                            '-->',
                            self.core.getAttribute(dstNode, 'name'));
                    }
                    */
                   
                    if (self.isMetaTypeOf(nodes[i], self.META['Ubuntu']) === true) {
                        DBModel.ApplicationModel.OS.name = self.core.getAttribute(nodes[i], 'name');
                    }

                    if (self.isMetaTypeOf(nodes[i], self.META['Ubuntu']) === true) {
                        DBModel.ApplicationModel.OS.version = self.core.getAttribute(nodes[i], 'version');
                    }

                    if (self.isMetaTypeOf(nodes[i], self.META['DBApplication']) === true) {
                        DBModel.ApplicationModel.AppType = self.core.getAttribute(nodes[i], 'name');
                    }
                    if (self.isMetaTypeOf(nodes[i], self.META['DBApplication']) === true) {
                        DBModel.ApplicationModel.DBport = self.core.getAttribute(nodes[i], 'port');
                    }

                    if (self.isMetaTypeOf(nodes[i], self.META['DBApplication']) === true) {
                        DBModel.ApplicationModel.DBPath = self.core.getAttribute(nodes[i], 'src');
                    }

                    if (self.isMetaTypeOf(nodes[i], self.META['DBApplication']) === true) {
                        DBModel.ApplicationModel.DB_host_ip = self.core.getAttribute(nodes[i], 'host_ip');
                    }

                    if (self.isMetaTypeOf(nodes[i], self.META['DBApplication']) === true) {
                        DBModel.ApplicationModel.DB.user = self.core.getAttribute(nodes[i], 'user');
                    }

                    if (self.isMetaTypeOf(nodes[i], self.META['DBApplication']) === true) {
                        DBModel.ApplicationModel.DB.password = self.core.getAttribute(nodes[i], 'password');
                    }

                }
                childrenPaths = self.core.getChildrenPaths(self.activeNode);

                for (i = 0; i < childrenPaths.length; i += 1) {
                    childNode = self.pathToNode[childrenPaths[i]];
                    // Log the name of the child (it's an attribute so we use getAttribute).
                    childName = self.core.getAttribute(childNode, 'name');
                    //self.logger.info('At childNode', childName);
                    if (self.isMetaTypeOf(childNode, self.META['DBApplication']) === true) {
                        // The children paths are available from the node.
                        var acq_path = self.core.getChildrenPaths(childNode);
                        for (j = 0; j < acq_path.length; j += 1) {
                            acq_node = self.pathToNode[acq_path[j]];
                            var acq_Name = self.core.getAttribute(acq_node, 'name');
                            //self.logger.info('At acq_node', acq_Name);
                            if (self.isMetaTypeOf(acq_node, self.META['mySQL']) === true) {
                                DBModel.ApplicationModel.DBEngine = self.core.getAttribute(acq_node, 'name');
                            }

                            if (self.isMetaTypeOf(acq_node, self.META['Oracle']) === true) {
                                DBModel.ApplicationModel.DBEngine = self.core.getAttribute(acq_node, 'name');
                            }
                        }
                    }

                }
                return DBModel;
            })
            .nodeify(callback);
    };

    return DeploymentCodeGenerator;
});